<?php

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Vendic\GoogleAutocomplete\ViewModel\Settings;
use Vendic\HyvaCheckoutGoogleAddressAutocomplete\ViewModel\AutoCompleteSelectors;
use Vendic\HyvaCheckoutGoogleAddressAutocomplete\ViewModel\FieldMapping;
use Hyva\Theme\ViewModel\HyvaCsp;

// phpcs:disable Generic.Files.LineLength

/** @var Escaper $escaper */
/** @var Template $block */
/** @var ViewModelRegistry $viewModels */
/** @var HyvaCsp $hyvaCsp */

/** @var Settings $googleAutocompleteSettings */
$googleAutocompleteSettings = $viewModels->require(Settings::class);
$apiKey = $escaper->escapeHtml($googleAutocompleteSettings->getApiKey());

/** @var AutoCompleteSelectors $autocompleteSelectorsViewModel */
$autocompleteSelectorsViewModel = $viewModels->require(AutoCompleteSelectors::class);
$autocompleteSelectors = $autocompleteSelectorsViewModel->get();

/** @var FieldMapping $fieldMapping */
$fieldMapping = $viewModels->require(FieldMapping::class);

if (!$apiKey) {
    return;
}

?>
<script>
    (() => {
        'use strict';

        let googleAutoCompleteInputs = [];

        // Initialize autocomplete when Magewire is loaded
        document.addEventListener('magewire:load', () => {
            initAutoCompleteJS()
        }, { once: true });

        // Re-init autocomplete when billing as shipping is toggled
        window.addEventListener('billing-as-shipping-toggled', () => { reInitAutocomplete()} );

        // Allow for re-initialization of the Google Autocomplete functionality via external scripts
        window.addEventListener('re-init-google-autocomplete', () => { reInitAutocomplete() });

        // Wait for Google Maps JS callback to add autocomplete to specified inputs
        document.addEventListener('google_maps_js_loaded', () => { addAutocompleteToInputs(); });

        // Listen for address changes from Google Autocomplete
        window.addEventListener('google-autocomplete-address-changed', (event) => {
            console.debug(`google-autocomplete-address-changed for ${event.detail.addressType}`, event.detail);

            if (event.detail.addressType == undefined) {
                console.error('Cannot find address type for event', event);
                return;
            }

            let address = {};

            event.detail.addressComponents.forEach(component => {
                component.types.forEach(type => {
                    // Use type as the key and long_name as the value
                    address[type] = type === 'country' ? component.short_name : component.long_name;
                });
            });

            if (event.detail.company !== undefined) {
                address['company'] = event.detail.company;
            }

            updateCheckoutAddressFields(event.detail.addressType, address);
        });

        function updateCheckoutAddressFields(addressType, address) {
            console.debug(`Updating address fields for ${addressType}`, address);

            // The selectors/field mapping can be found in di.xml, meaning they can be changed without modifying this file.
            const fieldMappings = <?= /* @noEscape */ json_encode($fieldMapping->get()) ?>;

            const form = [
                'address-form',
                'address-list.form'
            ];

            let component;

            form.forEach((form) => {
                try {
                    component = Magewire.find(`checkout.${addressType}-details.` + form);
                } catch (e) {
                    console.debug(`Cannot update Magewire component checkout.${addressType}-details.` + form);
                }
            });

            Object.keys(fieldMappings).forEach(key => {
                const value = address[key];
                const identifier = `address.${fieldMappings[key]}`;
                component.set(identifier, value ?? "");
            });

            // If there is a street_number, put it and address_line_1 in the same input as would be expected
            if (address['street_number']) {
                component.set('address.street.0', address['street_number'] + ' ' + (address['route'] ?? ""));
                component.set('address.street.1', "");
            }

            // If no locality is set, use a fallback
            if (!address['locality']) {
                switch (address['country']) {
                    case "GB":
                        // If UK address, city = postal_town
                        component.set('address.city', address['postal_town']);
                        break;
                    default:
                        component.set('address.city', address['administrative_area_level_2']);
                        break;
                }
            }


            // If the region (state/province) is from a select field, set the address.region field appropriately by ID
            if (getRegionInputField()?.options) {
                // Value to match against in the select options
                const labelToSet = address['administrative_area_level_1'];
                component.set('address.region', getRegionId(labelToSet) ?? '');
            }


            component.save();
        }

        /**
         * Used to fetch the region input field, either shipping or billing
         * 
         * @return HTMLSelectElement | null
         */
        function getRegionInputField() {
            let regionSelect = document.getElementById("shipping-region");

            if (!regionSelect) {
                regionSelect = document.getElementById("billing-region");
            }

            return regionSelect;
        }

        /**
         * Get the index of a region option by label
         * 
         * @param {string} label - The label to match against
         * @return number | null
         */
        function getRegionId(label) {
            // Get the region input, and if it isn't a select, return null
            const regionSelect = getRegionInputField();
            if (!regionSelect.options) return null;

            // Iterate through all options, and if there is a label match, return the index
            for (var i = 0; i < regionSelect.options.length; i++) {
                if (regionSelect.options[i].text === label) {
                    return i;
                }
            }

            // Failing a match, return null
            return null;
        }
        
        /**
         * Re-initializes the Google Autocomplete functionality.
         */
        function reInitAutocomplete() {
            setAutoCompleteInputs();
            addAutocompleteToInputs();
        }

        function setAutoCompleteInputs() {
            const querySelectors = <?= /* @noEscape */ json_encode($autocompleteSelectors) ?>;

            // Loop through the query selectors and find the inputs
            querySelectors.forEach(querySelector => {
                const input = document.querySelector(querySelector);
                if (input) {
                    googleAutoCompleteInputs.push(input);
                }
            });
        }

        /**
         * Initializes Google Maps JS
         */
        function initAutoCompleteJS() {

            setAutoCompleteInputs();

            // Add autocomplete JS
            const script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key=<?= $escaper->escapeJs($apiKey) ?>&libraries=places&callback=googleReady&region=<?= $escaper->escapeJs($googleAutocompleteSettings->getDefaultCountryId())?>';
            script.type = 'text/javascript';
            document.head.append(script);
        }

        /**
         * Initializes Google Autocomplete functionality on specified input elements.
         * Associates an Autocomplete instance with each input element and listens for the 'place_changed' event.
         * When a place is selected, the 'handleResponse' function is called with the selected place's details.
         *
         * @returns {void}
         */
        function addAutocompleteToInputs() {
            // Loop through the inputs and add Google autocomplete to each input
            googleAutoCompleteInputs.forEach(element => {
                const autocomplete = new window.google.maps.places.Autocomplete(element);
                window.google.maps.event.addListener(
                    autocomplete,
                    'place_changed', () => handleResponse(autocomplete.getPlace(), element)
                );
            });
        }

        /**
         * Handles the response from the Google Places API and extracts address information.
         * Emits a custom event 'google-autocomplete-address-changed' with the extracted address details.
         *
         * @param {Object} result - The response object from the Google Places API.
         * @returns {void}
         */
        function handleResponse(result, element) {
            if (!Array.isArray(result.address_components)) {
                console.error(`Google Places API response does not contain valid address_components`);
                return;
            }

            // Create a custom object with appropriate keys for the event detail
            const eventDetail = {
                company: result.business_status === 'OPERATIONAL' ? result.name : '',
                addressComponents: result.address_components,
                addressType: getAddressType(element)
            };

            window.dispatchEvent(
                new CustomEvent(
                    'google-autocomplete-address-changed',
                    {
                        detail: eventDetail
                    }
                )
            );
        }

        function getAddressType(element) {
            if (element.id === undefined) {
                return null;
            }

            const match = element.id.match(/^([^-]+)/);
            return match ? match[1] : null;
        }
    })();

    /**
     * Callback function for Google Maps JS.
     */
    function googleReady() {
        document.dispatchEvent(new Event('google_maps_js_loaded'));
    }
</script>
<?php $hyvaCsp->registerInlineScript() ?>
