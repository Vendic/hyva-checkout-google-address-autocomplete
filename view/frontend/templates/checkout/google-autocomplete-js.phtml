<?php declare(strict_types=1);

// phpcs:disable Generic.Files.LineLength

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Vendic\GoogleAutocomplete\ViewModel\Settings;
use Vendic\HyvaCheckoutGoogleAddressAutocomplete\ViewModel\AutoCompleteSelectors;
use Vendic\HyvaCheckoutGoogleAddressAutocomplete\ViewModel\FieldMapping;

/** @var Escaper $escaper */
/** @var Template $block */
/** @var ViewModelRegistry $viewModels */
/** @var Settings $googleAutocompleteSettings */

$googleAutocompleteSettings = $viewModels->require(Settings::class);
$apiKey = $escaper->escapeHtml($googleAutocompleteSettings->getApiKey());

/** @var AutoCompleteSelectors $autocompleteSelectorsViewModel */
$autocompleteSelectorsViewModel = $viewModels->require(AutoCompleteSelectors::class);
$autocompleteSelectors = $autocompleteSelectorsViewModel->get();

/** @var FieldMapping $fieldMapping */
$fieldMapping = $viewModels->require(FieldMapping::class);

if (!$apiKey) {
    return;
}

?>
<script>
    (() => {
        'use strict';

        let googleAutoCompleteInputs = [];

        // Initialize autocomplete when Magewire is loaded
        document.addEventListener('magewire:load', () => {
            initAutoCompleteJS()
        }, { once: true });

        // Re-init autocomplete when billing as shipping is toggled
        window.addEventListener('billing-as-shipping-toggled', () => { reInitAutocomplete()} );

        // Allow for re-initialization of the Google Autocomplete functionality via external scripts
        window.addEventListener('re-init-google-autocomplete', () => { reInitAutocomplete() });

        // Wait for Google Maps JS callback to add autocomplete to specified inputs
        document.addEventListener('google_maps_js_loaded', () => { addAutocompleteToInputs(); });

        // Listen for address changes from Google Autocomplete
        window.addEventListener('google-autocomplete-address-changed', (event) => {
            console.debug(`google-autocomplete-address-changed for ${event.detail.addressType}`, event.detail);

            if (event.detail.addressType == undefined) {
                console.error('Cannot find address type for event', event);
                return;
            }

            let address = {};

            event.detail.addressComponents.forEach(component => {
                component.types.forEach(type => {
                    // Use type as the key and long_name as the value
                    address[type] = type === 'country' ? component.short_name : component.long_name;
                });
            });

            if (event.detail.company !== undefined) {
                address['company'] = event.detail.company;
            }

            updateCheckoutAddressFields(event.detail.addressType, address);
        });

        function updateCheckoutAddressFields(addressType, address) {
            console.debug(`Updating address fields for ${addressType}`, address);

            // The selectors/field mapping can be found in di.xml, meaning they can be changed without modifying this file.
            const fieldMappings = <?= /* @noEscape */ json_encode($fieldMapping->get()) ?>;

            // searching for standard address form and modal address form
            let component;
            try {
                component = Magewire.find(`checkout.${addressType}-details.address-form`);
            } catch (e) {
                try {
                    component = Magewire.find(`checkout.${addressType}-details.address-list.form`);
                } catch (e) {
                    console.error(`Cannot find none of Magewire components checkout.${addressType}-details.address-form or checkout.${addressType}-details.address-list.form`);
                    return;
                }
            }

            if (!component) {
                console.error(`Cannot find Magewire component checkout.${addressType}-details.address-form`);
                return;
            }

            Object.keys(fieldMappings).forEach(key => {
                const value = address[key];
                const identifier = `address.${fieldMappings[key]}`;
                component.set(identifier, value ?? "");
            });

            component.save();
        }

        /**
         * Re-initializes the Google Autocomplete functionality.
         */
        function reInitAutocomplete() {
            setAutoCompleteInputs();
            addAutocompleteToInputs();
        }

        function setAutoCompleteInputs() {
            const querySelectors = <?= /* @noEscape */ json_encode($autocompleteSelectors) ?>;

            // Loop through the query selectors and find the inputs
            querySelectors.forEach(querySelector => {
                const input = document.querySelector(querySelector);
                if (input) {
                    googleAutoCompleteInputs.push(input);
                }
            });
        }

        /**
         * Initializes Google Maps JS
         */
        function initAutoCompleteJS() {

            setAutoCompleteInputs();

            // Add autocomplete JS
            const script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key=<?= $escaper->escapeJs($apiKey) ?>&libraries=places&callback=googleReady&region=<?= $escaper->escapeJs($googleAutocompleteSettings->getDefaultCountryId())?>';
            script.type = 'text/javascript';
            document.head.append(script);
        }

        /**
         * Initializes Google Autocomplete functionality on specified input elements.
         * Associates an Autocomplete instance with each input element and listens for the 'place_changed' event.
         * When a place is selected, the 'handleResponse' function is called with the selected place's details.
         *
         * @returns {void}
         */
        function addAutocompleteToInputs() {
            // Loop through the inputs and add Google autocomplete to each input
            googleAutoCompleteInputs.forEach(element => {
                const autocomplete = new window.google.maps.places.Autocomplete(element);
                window.google.maps.event.addListener(
                    autocomplete,
                    'place_changed', () => handleResponse(autocomplete.getPlace(), element)
                );
            });
        }

        /**
         * Handles the response from the Google Places API and extracts address information.
         * Emits a custom event 'google-autocomplete-address-changed' with the extracted address details.
         *
         * @param {Object} result - The response object from the Google Places API.
         * @returns {void}
         */
        function handleResponse(result, element) {
            if (!Array.isArray(result.address_components)) {
                console.error(`Google Places API response does not contain valid address_components`);
                return;
            }

            // Create a custom object with appropriate keys for the event detail
            const eventDetail = {
                company: result.business_status === 'OPERATIONAL' ? result.name : '',
                addressComponents: result.address_components,
                addressType: getAddressType(element)
            };

            window.dispatchEvent(
                new CustomEvent(
                    'google-autocomplete-address-changed',
                    {
                        detail: eventDetail
                    }
                )
            );
        }

        function getAddressType(element) {
            if (element.id === undefined) {
                return null;
            }

            const match = element.id.match(/^([^-]+)/);
            return match ? match[1] : null;
        }
    })();

    /**
     * Callback function for Google Maps JS.
     */
    function googleReady() {
        document.dispatchEvent(new Event('google_maps_js_loaded'));
    }

    /**
     * hyva.modal overrides to catch closing of modal dialog. Original hyva theme modals do not fire modal hide events correctly
     * on click outside or cancel button, only submit button.
     * This is needed to move Autocomplete containers back to HTML body before other actions like saved address selection change
     * remove Autocomplete containers from modal
     *
     */
    (function () {
        //console.log('hyva.modal.pop override');

        // inject moveToBody() into window.hyva.modal.pop() method when closing the modal other way than submit button
        let origPop = window.hyva.modal.pop;
        window.hyva.modal.pop = function () {
            //console.log('hyva.modal.pop()');
            origPop();
            initFixAutocompleteContainersForModal.moveToBody();
        }

        // inject moveToBody() into window.hyva.modal.eventListeners.click() event (click outside of modal window to close it)
        // store reference to the original event subscriber function
        const originalListener = window.hyva.modal.eventListeners.click;
        // remove the original event subscriber
        document.removeEventListener('click', originalListener);
        // declare the new event subscriber function on the global window.hyva.modal.eventListeners object
        window.hyva.modal.eventListeners.click = event => {
            originalListener(event);
            initFixAutocompleteContainersForModal.moveToBody();
        };
        // Activate the new event listener
        document.addEventListener('click', window.hyva.modal.eventListeners.click);
    })()

    /**
     * Moving Autocomplete containers from body to modal and back to fix issues with DOM element position outside of modal dialog
     *
     * @type {{moveToModal(*): void, moveToBody(): void}}
     */
    let initFixAutocompleteContainersForModal = {

        /**
         * Fix for unable to mouse click results from Autocomplete
         * which also fixes autocomplete container absolute position within modal dialog
         *
         * @param ref
         */
        moveToModal(ref) {
            //console.log('moveToModal()');

            // this.$refs[ref] does not work here so querySelector is used to find modal
            const target = document.querySelector('div[x-ref="'+ ref +'"]');
            // Autocomplete containers
            const mapContainers = document.querySelectorAll('.pac-container');

            // moving element to modal and setting observer to fix autocomplete abosulte position top
            target.append(...mapContainers);
        },

        /**
         * Moving Autocomplete containers from modal back to body when modal closes so containers are not lost after address selection changes.
         */
        moveToBody() {
            //console.log('moveToBody()');

            const target = document.querySelector('body');
            const mapContainers = document.querySelectorAll('.pac-container');

            target.append(...mapContainers);
        }

    }
</script>

<?php
/**
 * AlpineJs object catching modal events for logged customers address forms.
 * Hide modal events are not working correctly so moveToBody() method is injected into window.hyva.modal.pop() and overriding window.hyva.modal.eventListeners.click() event
 *
 * Notes:
 * x-on:modal:hide:shipping-checkout-modal-address-form.window does not trigger for cancel or click outside of modal (hyva.modal incomplete implemenation)
 * x-on:modal:hide:billing-checkout-modal-address-form.window does not trigger for cancel or click outside of modal (hyva.modal incomplete implemenation)
 */
?>
<div x-data="initFixAutocompleteContainersForModal"
     x-on:modal:show:shipping-checkout-modal-address-form.window="moveToModal('checkout.shipping-details.address-list.form')"
     x-on:modal:show:billing-checkout-modal-address-form.window="moveToModal('checkout.billing-details.address-list.form')"
     >...</div>
